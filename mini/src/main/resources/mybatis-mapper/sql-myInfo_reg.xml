<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.mini.mapper.RegistryMapper">
	
	
	<select id="selectUserRegistry" parameterType="hashmap" resultType="com.example.mini.model.MyRegistry">
		SELECT
			R.REGISTRYNO,
			R.PRODUCTNO,
			R.TRIPNO,
			R.R_CDATETIME,
			R.R_UDATETIME,
			R.R_OPTION,
			R.R_CNT,
			R.R_CONTENT,
			R.FUNDYN,
			R.USERID,
		    U.U_NAME,
		    U.PARTNER,
		    P.PRODUCTNO,
		 	P.P_NAME,
		 	P.P_PRICE,
		 	(P.P_PRICE * R_CNT) AS TOTALPRICE,
			PM.P_STOCK,
			PI.IMGSRC,
		 	TI.IMGSRC,
			F.FSETPRICE,
			F.FPUTPRICE,
			O.ORDERNO
		FROM mini_db2.T1_REGISTRY AS R
		INNER JOIN mini_db2.T1_USER AS U ON U.USERID = R.USERID
		INNER JOIN mini_db2.T1_PRODUCT AS P ON P.PRODUCTNO = R.PRODUCTNO
		INNER JOIN mini_db2.T1_PDIMAGE AS  PI ON PI.PRODUCTNO = P.PRODUCTNO
		INNER JOIN mini_db2.T1_PDMANAGE AS PM ON PM.PRODUCTNO = P.PRODUCTNO
		LEFT JOIN mini_db2.T1_TRIPIMAGE AS TI ON TI.TRIPNO = R.TRIPNO
		LEFT JOIN (SELECT 	REGISTRYNO, FSETPRICE, SUM(FPUTPRICE) AS FPUTPRICE FROM mini_db2.T1_FUNDING GROUP BY FSETPRICE) F ON F.REGISTRYNO = R.REGISTRYNO
		LEFT JOIN mini_db2.T1_ORDER AS O ON O.PRODUCTNO = R.PRODUCTNO AND O.USERID = R.USERID
		WHERE R.USERID = #{userId} AND R.FUNDYN != 'D'
		ORDER BY ${sortOp}
	</select>
	<update id="updateRegistryOption" parameterType="hashmap">
		UPDATE mini_db2.T1_REGISTRY
		SET						
			R_OPTION = #{rOption},
			R_CONTENT = #{rContent},
			FUNDYN = #{fundYn},
			R_UDATETIME = NOW(),
			R_CNT = #{rCnt},
			R_UDATETIME = #{rUdatetime}			
		WHERE
			REGISTRYNO = #{registryNo}
	</update>
	<select id="selectUserImage" parameterType="hashmap" resultType="com.example.mini.model.UserImage">
		SELECT
			SRCIMGNO,
			USERID,
			IMGSRC,
			IMGNAME,
			ORGNAME,
			IMGTYPE,
			IMGUSETYPE
		FROM
			mini_db2.T1_USERIMAGE
		WHERE 
			USERID = #{userId}
	</select>
	<insert id="saveUserImg" parameterType="hashmap">
		INSERT INTO mini_db2.T1_USERIMAGE
		VALUES
			(#{NULL}, #{userId}, #{imgSrc}, #{imgName}, #{orgName}, #{imgType}, #{imgUsetype})
	</insert>

	<update id="updateUserImg" parameterType="hashmap">
		UPDATE mini_db2.T1_USERIMAGE
		SET
			IMGSRC = #{imgSrc},
			IMGNAME = #{imgName},
			ORGNAME = #{orgName},
			IMGTYPE = #{imgType},
			IMGUSETYPE = #{imgUsetype}
		WHERE
			IMGUSETYPE = #{imgUsetype} AND USERID = #{userId}
	</update>	
	
	<!-- 레지스트리 추가 -->
	<insert id="registryAdd" parameterType="hashMap">
		INSERT INTO mini_db2.T1_REGISTRY
		VALUES (NULL, #{productNo}, NULL, NOW(), NULL, #{rCnt}, #{rOption}, #{rContent}, #{userId}, #{fundYn})
	</insert>
	
	<!-- 레지스트리 삭제 - 데이터는 남기고 삭제표시만 함 -->
	<update id="registryDel" parameterType="hashMap">
		UPDATE mini_db2.T1_REGISTRY
		SET FUNDYN = 'D'
		WHERE REGISTRYNO = #{registryNo}
	</update>
	
	<!-- 레지스트리 삭제 - 데이터는 남기고 삭제표시만 함 -->
	<update id="registryDelFund" parameterType="hashMap">
		UPDATE mini_db2.T1_FUNDING
		SET FUNDYN = 'N'
		WHERE G_PHONE = NULL AND REGISTRYNO = #{registryNo}
	</update>
	
	<!-- 유저 펀딩 기록 입력 -->
	<insert id="registryAddFunding" parameterType="hashmap">
		INSERT INTO mini_db2.T1_FUNDING
		SELECT
			REGISTRYNO, #{fundingNo}, #{userId}, NOW(), DATE_ADD(NOW(), INTERVAL 1 MONTH), #{fsetprice}, NULL, NULL, NULL, #{fundYn}
		FROM mini_db2.T1_REGISTRY
		WHERE USERID = #{userId} AND FUNDYN ='Y'
		ORDER BY REGISTRYNO DESC LIMIT 1;
	</insert>

</mapper>